package main

import (
	"fmt"
)

func main() {
	//board := [][]byte{
	//	{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
	//	{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
	//	{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
	//	{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
	//	{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
	//	{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
	//	{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
	//	{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
	//	{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	//}
	//board2 := [][]byte{
	//	{'8', '4', '.', '.', '7', '.', '.', '.', '.'},
	//	{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
	//	{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
	//	{'8', '3', '.', '.', '6', '.', '.', '.', '3'},
	//	{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
	//	{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
	//	{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
	//	{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
	//	{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	//}
	//fmt.Println(board2)

	borad3 := [][]byte{
		{'.', '.', '5', '.', '.', '.', '.', '.', '6'},
		{'.', '.', '.', '.', '1', '4', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '9', '2', '.', '.'},
		{'5', '.', '.', '.', '.', '2', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '3', '.'},
		{'.', '.', '.', '5', '4', '.', '.', '.', '.'},
		{'3', '.', '.', '.', '.', '.', '4', '2', '.'},
		{'.', '.', '.', '2', '7', '.', '6', '.', '.'},
	}
	//board4 := [][]byte{
	//	{'.', '.', '.', '.', '.', '.', '5', '.', '.'},
	//	{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
	//	{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
	//	{'9', '3', '.', '.', '2', '.', '4', '.', '.'},
	//	{'.', '.', '7', '.', '.', '.', '3', '.', '.'},
	//	{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
	//	{'.', '.', '.', '3', '4', '.', '.', '.', '.'},
	//	{'.', '.', '.', '.', '.', '3', '.', '.', '.'},
	//	{'.', '.', '.', '.', '.', '5', '2', '.', '.'},
	//}
   [
	["3",".",".",".",".","4",".",".","."],
	[".",".",".",".","1",".","8",".","."],
	[".","7","2",".",".",".",".",".","."],
	[".",".","5",".",".",".",".",".","."],[".","4",".",".",".",".",".",".","."],[".",".",".",".",".",".","3",".","."],[".",".",".",".",".",".",".",".","1"],["1","3",".",".",".","5",".",".","."],[".",".",".",".","5",".",".","2","."]]
	isValidSudoku(borad3)
}

func isValidSudoku(board [][]byte) bool {
	cubeMap := make(map[int]map[byte]bool, 9)
	cubeMap[0], cubeMap[1], cubeMap[2] = map[byte]bool{}, map[byte]bool{}, map[byte]bool{}
	for i := 0; i < 9; i++ {
		rowsMap, colsMap := map[byte]bool{}, map[byte]bool{}
		for j := 0; j < 9; j++ {
			if (i == 3 && j == 0) || (i == 6 && j == 0) || (i == 8 && j == 0) {
				fmt.Println("cubeMap", cubeMap)
				cubeMap[0], cubeMap[1], cubeMap[2] = map[byte]bool{}, map[byte]bool{}, map[byte]bool{}
				fmt.Println("cubeMap", cubeMap)
			}
			if _, ok := colsMap[board[i][j]]; ok {
				return false
			} else if board[i][j] != '.' {
				colsMap[board[i][j]] = true
			}
			if _, exists := cubeMap[j/3][board[i][j]]; exists {
				fmt.Println("cubeMapIfExists", cubeMap, i, j, board[i][j], string(board[i][j]))
				return false
			} else if board[i][j] != '.' {
				cubeMap[j/3][board[i][j]] = true
			}
			fmt.Println(cubeMap)

			if _, ok := rowsMap[board[j][i]]; ok {
				return false
			} else if board[j][i] != '.' {
				rowsMap[board[j][i]] = true
			}
			fmt.Println(i, j, string(board[i][j]), string(board[j][i]), colsMap, rowsMap)
		}
	}
	return true
}
